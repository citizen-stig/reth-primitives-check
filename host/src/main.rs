use std::hash::Hash;
use revm_primitives::{AccountInfo, U256};
// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    METHOD_ELF, METHOD_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};

use simple_hasher::SimpleSha256Hasher;


fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // For example:
    let input: u32 = 15;

    let mut account_info = AccountInfo::from_balance(U256::from(100_000));
    account_info.nonce = input as u64;

    let mut hasher = SimpleSha256Hasher::new();
    account_info.hash(&mut hasher);
    let result = hasher.result();

    tracing::info!("Account info: {:?}, hash: {:?}", account_info, result);

    let s = b"";
    let mut empty_string_hasher = SimpleSha256Hasher::new();
    s.hash(&mut empty_string_hasher);
    let empty_s_hash = empty_string_hasher.result();

    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .write(&account_info)
        .unwrap()
        .write(&result)
        .unwrap()
        .write(&empty_s_hash)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover
        .prove(env, METHOD_ELF)
        .unwrap();

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let _output: u32 = receipt.journal.decode().unwrap();

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(METHOD_ID)
        .unwrap();
}
